using System.Runtime.InteropServices;

namespace SWTSharp.Platform;

/// <summary>
/// macOS platform implementation - TabFolder widget methods.
/// </summary>
internal partial class MacOSPlatform
{
    private readonly Dictionary<IntPtr, TabFolderData> _tabFolderData = new();
    private readonly Dictionary<IntPtr, TabItemData> _tabItemData = new();
    private IntPtr _nsTabViewClass;
    private IntPtr _nsTabViewItemClass;
    private IntPtr _selAddTabViewItem;
    private IntPtr _selRemoveTabViewItem;
    private IntPtr _selSelectTabViewItemAtIndex;
    private IntPtr _selIndexOfTabViewItem;
    private IntPtr _selNumberOfTabViewItems;
    private IntPtr _selTabViewItemAtIndex;
    private IntPtr _selSelectedTabViewItem;
    private IntPtr _selSetLabel;
    private IntPtr _selSetView;

    private class TabFolderData
    {
        public IntPtr TabView { get; set; }
        public List<IntPtr> TabItems { get; set; } = new();
    }

    private class TabItemData
    {
        public IntPtr TabFolderHandle { get; set; }
        public IntPtr TabViewItem { get; set; }
        public IntPtr ContentView { get; set; }
        public int Index { get; set; }
    }

    private int _nextTabItemId = 0;

    private void InitializeTabFolderSelectors()
    {
        // Ensure list selectors are initialized (we reuse _selInitWithIdentifier from there)
        InitializeListSelectors();

        if (_nsTabViewClass == IntPtr.Zero)
        {
            _nsTabViewClass = objc_getClass("NSTabView");
            _nsTabViewItemClass = objc_getClass("NSTabViewItem");

            _selAddTabViewItem = sel_registerName("addTabViewItem:");
            _selRemoveTabViewItem = sel_registerName("removeTabViewItem:");
            _selSelectTabViewItemAtIndex = sel_registerName("selectTabViewItemAtIndex:");
            _selIndexOfTabViewItem = sel_registerName("indexOfTabViewItem:");
            _selNumberOfTabViewItems = sel_registerName("numberOfTabViewItems");
            _selTabViewItemAtIndex = sel_registerName("tabViewItemAtIndex:");
            _selSelectedTabViewItem = sel_registerName("selectedTabViewItem");
            _selSetLabel = sel_registerName("setLabel:");
            _selSetView = sel_registerName("setView:");
        }
    }

    public IntPtr CreateTabFolder(IntPtr parent, int style)
    {
        InitializeTabFolderSelectors();

        // Create NSTabView
        IntPtr tabView = objc_msgSend(_nsTabViewClass, _selAlloc);
        tabView = objc_msgSend(tabView, _selInit);

        // Set default frame
        IntPtr selSetFrame = sel_registerName("setFrame:");
        CGRect frame = new CGRect(0, 0, 300, 200);
        objc_msgSend_rect(tabView, selSetFrame, frame);

        // Add to parent if provided
        if (parent != IntPtr.Zero)
        {
            objc_msgSend(parent, _selAddSubview, tabView);
        }

        // Store tab folder data
        _tabFolderData[tabView] = new TabFolderData
        {
            TabView = tabView
        };

        return tabView;
    }

    public void SetTabSelection(IntPtr handle, int index)
    {
        if (handle == IntPtr.Zero || !_tabFolderData.TryGetValue(handle, out var data))
            return;

        InitializeTabFolderSelectors();

        if (index >= 0 && index < data.TabItems.Count)
        {
            objc_msgSend(data.TabView, _selSelectTabViewItemAtIndex, new IntPtr(index));
        }
    }

    public int GetTabSelection(IntPtr handle)
    {
        if (handle == IntPtr.Zero || !_tabFolderData.TryGetValue(handle, out var data))
            return -1;

        InitializeTabFolderSelectors();

        // Get index of selected tab
        IntPtr selectedItem = objc_msgSend(data.TabView, _selSelectedTabViewItem);
        if (selectedItem == IntPtr.Zero)
            return -1;

        // Find the index of this item
        nint index = objc_msgSend_nint(data.TabView, _selIndexOfTabViewItem, selectedItem);
        return (int)index;
    }

    // TabItem operations
    public IntPtr CreateTabItem(IntPtr tabFolderHandle, int style, int index)
    {
        if (tabFolderHandle == IntPtr.Zero || !_tabFolderData.TryGetValue(tabFolderHandle, out var folderData))
            return IntPtr.Zero;

        InitializeTabFolderSelectors();

        // Create NSTabViewItem with unique identifier
        IntPtr tabViewItem = objc_msgSend(_nsTabViewItemClass, _selAlloc);
        IntPtr identifier = CreateNSString($"TabItem{_nextTabItemId++}");
        tabViewItem = objc_msgSend(tabViewItem, _selInitWithIdentifier, identifier);

        // Set default label
        IntPtr defaultLabel = CreateNSString($"Tab {folderData.TabItems.Count}");
        objc_msgSend(tabViewItem, _selSetLabel, defaultLabel);

        // Create a container view for the tab content
        if (_nsViewClass == IntPtr.Zero)
        {
            _nsViewClass = objc_getClass("NSView");
        }
        IntPtr contentView = objc_msgSend(_nsViewClass, _selAlloc);
        contentView = objc_msgSend(contentView, _selInit);

        // Set content view to tab item
        objc_msgSend(tabViewItem, _selSetView, contentView);

        // Add tab item to tab view
        objc_msgSend(folderData.TabView, _selAddTabViewItem, tabViewItem);

        // Create pseudo-handle for tab item (use high bits to differentiate from other handles)
        IntPtr tabItemHandle = new IntPtr(0x30000000 + _nextTabItemId - 1);

        // Store tab item data
        _tabItemData[tabItemHandle] = new TabItemData
        {
            TabFolderHandle = tabFolderHandle,
            TabViewItem = tabViewItem,
            ContentView = contentView,
            Index = index >= 0 ? index : folderData.TabItems.Count
        };

        // Add to folder's tab items list
        if (index >= 0 && index < folderData.TabItems.Count)
        {
            folderData.TabItems.Insert(index, tabItemHandle);
        }
        else
        {
            folderData.TabItems.Add(tabItemHandle);
        }

        return tabItemHandle;
    }

    public void SetTabItemText(IntPtr handle, string text)
    {
        if (!_tabItemData.TryGetValue(handle, out var data))
            return;

        InitializeTabFolderSelectors();

        IntPtr label = CreateNSString(text ?? "");
        objc_msgSend(data.TabViewItem, _selSetLabel, label);
    }

    public void SetTabItemControl(IntPtr handle, IntPtr controlHandle)
    {
        if (!_tabItemData.TryGetValue(handle, out var data))
            return;

        if (controlHandle == IntPtr.Zero)
            return;

        InitializeTabFolderSelectors();

        // Remove the control from its current parent
        IntPtr selSuperview = sel_registerName("superview");
        IntPtr currentParent = objc_msgSend(controlHandle, selSuperview);
        if (currentParent != IntPtr.Zero)
        {
            IntPtr selRemoveFromSuperview = sel_registerName("removeFromSuperview");
            objc_msgSend(controlHandle, selRemoveFromSuperview);
        }

        // Add control to the tab's content view
        objc_msgSend(data.ContentView, _selAddSubview, controlHandle);

        // Make the control fill the content view
        IntPtr selFrame = sel_registerName("frame");
        objc_msgSend_stret(out CGRect parentFrame, data.ContentView, selFrame);

        IntPtr selSetFrame = sel_registerName("setFrame:");
        CGRect controlFrame = new CGRect(0, 0, parentFrame.width, parentFrame.height);
        objc_msgSend_rect(controlHandle, selSetFrame, controlFrame);
    }

    public void SetTabItemToolTip(IntPtr handle, string toolTip)
    {
        if (!_tabItemData.TryGetValue(handle, out var data))
            return;

        InitializeTabFolderSelectors();

        IntPtr selSetToolTip = sel_registerName("setToolTip:");
        IntPtr toolTipString = CreateNSString(toolTip ?? "");
        objc_msgSend(data.TabViewItem, selSetToolTip, toolTipString);
    }

    // ToolBar operations
    public IntPtr CreateToolBar(int style)
    {
        throw new NotImplementedException("ToolBar not yet implemented on macOS platform");
    }

    // ToolItem operations
    public IntPtr CreateToolItem(IntPtr toolBarHandle, int style, int id, int index)
    {
        throw new NotImplementedException("ToolItem not yet implemented on macOS platform");
    }

    public void DestroyToolItem(IntPtr handle)
    {
        throw new NotImplementedException("ToolItem not yet implemented on macOS platform");
    }

    public void SetToolItemText(IntPtr handle, string text)
    {
        throw new NotImplementedException("ToolItem not yet implemented on macOS platform");
    }

    public void SetToolItemImage(IntPtr handle, IntPtr image)
    {
        throw new NotImplementedException("ToolItem not yet implemented on macOS platform");
    }

    public void SetToolItemToolTip(IntPtr handle, string toolTip)
    {
        throw new NotImplementedException("ToolItem not yet implemented on macOS platform");
    }

    public void SetToolItemSelection(IntPtr handle, bool selected)
    {
        throw new NotImplementedException("ToolItem not yet implemented on macOS platform");
    }

    public void SetToolItemEnabled(IntPtr handle, bool enabled)
    {
        throw new NotImplementedException("ToolItem not yet implemented on macOS platform");
    }

    public void SetToolItemWidth(IntPtr handle, int width)
    {
        throw new NotImplementedException("ToolItem not yet implemented on macOS platform");
    }

    public void SetToolItemControl(IntPtr handle, IntPtr control)
    {
        throw new NotImplementedException("ToolItem not yet implemented on macOS platform");
    }

    // Tree operations - using NSOutlineView for hierarchical display
}
